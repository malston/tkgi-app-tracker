# Docker Compose configuration for testing TKGI Application Tracker pipeline tasks locally
# This mirrors the Concourse execution environment using container images similar to production

services:
  # Base service for TKGI tasks - uses Ubuntu with common tools
  # This approximates the s3-container-image used in production
  tkgi-task-base:
    image: ubuntu:22.04
    working_dir: /workspace
    environment:
      - DEBIAN_FRONTEND=noninteractive
      - PATH=/usr/local/bin:/usr/bin:/bin
    volumes:
      - .:/workspace/tkgi-app-tracker-repo:ro
      - ./test-data:/workspace/params:ro
      - ./test-output:/workspace/output
    command: /bin/bash
    profiles:
      - manual

  # Data collection task
  collect-data:
    extends: tkgi-task-base
    environment:
      # Foundation Configuration
      - FOUNDATION=dc01-k8s-n-01
      - DATACENTER=dc01
      - ENVIRONMENT=lab
      # TKGI/Ops Manager Configuration (use test values)
      - OM_TARGET=opsman.acme.com
      - OM_CLIENT_ID=test-client
      - OM_CLIENT_SECRET=test-secret
      - TKGI_API_ENDPOINT=api.pks.acme.com
    volumes:
      - .:/workspace/tkgi-app-tracker-repo:ro
      - ./test-data:/workspace/params:ro
      - ./test-output:/workspace/collected-data
    command: >
      bash -c "
        # Install required tools
        apt-get update &&
        apt-get install -y curl wget jq python3 python3-pip git &&
        # Create build directory like Concourse does
        mkdir -p /tmp/build &&
        cd /tmp/build &&
        # Copy inputs as Concourse would mount them
        cp -r /workspace/tkgi-app-tracker-repo . &&
        mkdir -p collected-data &&
        # Make scripts executable
        find tkgi-app-tracker-repo -name '*.sh' -type f -exec chmod +x {} + &&
        # Run the task
        tkgi-app-tracker-repo/ci/tasks/collect-data/task.sh
      "
    profiles:
      - collect-data

  # Data aggregation task
  aggregate-data:
    extends: tkgi-task-base
    volumes:
      - .:/workspace/tkgi-app-tracker-repo:ro
      - ./test-output:/workspace/collected-data:ro
      - ./test-output:/workspace/aggregated-data
    command: >
      bash -c "
        # Install required tools
        apt-get update &&
        apt-get install -y curl wget jq python3 python3-pip git &&
        # Create build directory like Concourse does
        mkdir -p /tmp/build &&
        cd /tmp/build &&
        # Copy inputs as Concourse would mount them
        cp -r /workspace/tkgi-app-tracker-repo . &&
        cp -r /workspace/collected-data . &&
        mkdir -p aggregated-data &&
        # Install Python requirements
        pip3 install -r tkgi-app-tracker-repo/requirements.txt &&
        # Make scripts executable
        find tkgi-app-tracker-repo -name '*.sh' -type f -exec chmod +x {} + &&
        # Run the task
        tkgi-app-tracker-repo/ci/tasks/aggregate-data/task.sh
      "
    profiles:
      - aggregate-data

  # Report generation task
  generate-reports:
    extends: tkgi-task-base
    volumes:
      - .:/workspace/tkgi-app-tracker-repo:ro
      - ./test-output:/workspace/aggregated-data:ro
      - ./test-output:/workspace/generated-reports
    command: >
      bash -c "
        # Install required tools
        apt-get update &&
        apt-get install -y curl wget jq python3 python3-pip git &&
        # Create build directory like Concourse does
        mkdir -p /tmp/build &&
        cd /tmp/build &&
        # Copy inputs as Concourse would mount them
        cp -r /workspace/tkgi-app-tracker-repo . &&
        cp -r /workspace/aggregated-data . &&
        mkdir -p generated-reports &&
        # Install Python requirements
        pip3 install -r tkgi-app-tracker-repo/requirements.txt &&
        # Make scripts executable
        find tkgi-app-tracker-repo -name '*.sh' -type f -exec chmod +x {} + &&
        # Run the task
        tkgi-app-tracker-repo/ci/tasks/generate-reports/task.sh
      "
    profiles:
      - generate-reports

  # Package reports task
  package-reports:
    extends: tkgi-task-base
    volumes:
      - .:/workspace/tkgi-app-tracker-repo:ro
      - ./test-output:/workspace/generated-reports:ro
      - ./test-output:/workspace/packaged-reports
    command: >
      bash -c "
        # Install required tools
        apt-get update &&
        apt-get install -y curl jq python3 python3-pip git tar gzip &&
        # Create build directory like Concourse does
        mkdir -p /tmp/build &&
        cd /tmp/build &&
        # Copy inputs as Concourse would mount them
        cp -r /workspace/tkgi-app-tracker-repo . &&
        cp -r /workspace/generated-reports . &&
        mkdir -p packaged-reports &&
        # Install Python requirements
        pip3 install -r tkgi-app-tracker-repo/requirements.txt &&
        # Make scripts executable
        find tkgi-app-tracker-repo -name '*.sh' -type f -exec chmod +x {} + &&
        # Run the task
        tkgi-app-tracker-repo/ci/tasks/package-reports/task.sh
      "
    profiles:
      - package-reports

  # Test runner
  run-tests:
    extends: tkgi-task-base
    volumes:
      - .:/workspace/tkgi-app-tracker-repo:ro
      - ./test-output:/workspace/test-results
    command: >
      bash -c "
        # Install required tools including bats
        apt-get update &&
        apt-get install -y curl jq python3 python3-pip git bats &&
        # Create build directory like Concourse does
        mkdir -p /tmp/build &&
        cd /tmp/build &&
        # Copy inputs as Concourse would mount them
        cp -r /workspace/tkgi-app-tracker-repo . &&
        mkdir -p test-results &&
        # Install Python requirements
        pip3 install -r tkgi-app-tracker-repo/requirements.txt &&
        # Make scripts executable
        find tkgi-app-tracker-repo -name '*.sh' -type f -exec chmod +x {} + &&
        # Run the task
        tkgi-app-tracker-repo/ci/tasks/run-tests/task.sh
      "
    profiles:
      - run-tests

  # Script validation task
  validate-scripts:
    extends: tkgi-task-base
    volumes:
      - .:/workspace/tkgi-app-tracker-repo:ro
      - ./test-output:/workspace/validation-results
    command: >
      bash -c "
        # Install required tools including Python and YAML validation
        apt-get update &&
        apt-get install -y curl jq python3 python3-pip git shellcheck &&
        pip3 install PyYAML &&
        # Create build directory like Concourse does
        mkdir -p /tmp/build &&
        cd /tmp/build &&
        # Copy inputs as Concourse would mount them
        cp -r /workspace/tkgi-app-tracker-repo . &&
        mkdir -p validation-results &&
        # Make scripts executable
        find tkgi-app-tracker-repo -name '*.sh' -type f -exec chmod +x {} + &&
        # Run the task
        tkgi-app-tracker-repo/ci/tasks/validate-scripts/task.sh
      "
    profiles:
      - validate-scripts

  # Notification task testing
  notify:
    extends: tkgi-task-base
    environment:
      - MESSAGE=Test notification from TKGI Application Tracker
      - NOTIFICATION_TYPE=info
      - WEBHOOK_URL=
    command: >
      bash -c "
        # Install required tools
        apt-get update &&
        apt-get install -y curl jq &&
        # Create build directory like Concourse does
        mkdir -p /tmp/build &&
        cd /tmp/build &&
        # Copy inputs as Concourse would mount them
        cp -r /workspace/tkgi-app-tracker-repo . &&
        # Make scripts executable
        find tkgi-app-tracker-repo -name '*.sh' -type f -exec chmod +x {} + &&
        # Run the notification task
        tkgi-app-tracker-repo/ci/tasks/notify/task.sh
      "
    profiles:
      - notify

  # Interactive development environment
  # Use this for debugging and development
  dev:
    extends: tkgi-task-base
    volumes:
      - .:/workspace/tkgi-app-tracker-repo
      - ./test-data:/workspace/params
      - ./test-output:/workspace/output
    command: >
      bash -c "
        # Install development tools
        apt-get update &&
        apt-get install -y curl jq python3 python3-pip git vim bats shellcheck &&
        pip3 install -r /workspace/tkgi-app-tracker-repo/requirements.txt &&
        # Make scripts executable for development
        find /workspace/tkgi-app-tracker-repo -name '*.sh' -type f -exec chmod +x {} + 2>/dev/null || true &&
        echo 'Development environment ready!' &&
        echo 'Workspace: /workspace' &&
        echo 'Repository: /workspace/tkgi-app-tracker-repo' &&
        echo 'Test data: /workspace/params' &&
        echo 'Output: /workspace/output' &&
        /bin/bash
      "
    stdin_open: true
    tty: true
    profiles:
      - dev

# Named volumes for persistent data during testing
volumes:
  test-output:
    driver: local
